/**
 * Name:Tiffany Albelto
 *Course Name:Software Development 1 - 202410-CEN-3024C-16046

 * Class Name: LMSGUI

 * Description: The public class LMSGUI serves as the graphical user interface (GUI) for the Library Management System (LMS).
 * Its objective is to provide a user-friendly interface for interacting with the library system, allowing users to perform
 * tasks such as adding, removing, checking out, and checking in books.
 */




import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;



public class LMSGUI {
    /**
     * Connection to the database
     */
    Connection connection;
    private JTextField fileTextField;
    private JButton openFileButton;
    private JButton removeTitleButton;
    private JTextField removeBarcodeTextField;
    private JButton removeBarcodeButton;
    private JTextField removeTileTextField;
    private JTextField checkoutTitleTextField;
    private JButton checkoutButton;
    private JButton checkinButton;
    private JTextField checkinTitleTextField;
    private JTextField textField1;
    private JButton printDatabaseButton;
    private JTextField textField2;
    private JButton exitButton;
    private final JTextArea display;

    /**
     * Instance of the Library class for library management
     */
    private final Library library;


    public LMSGUI() {

        /*Instantiate the Library class*/
        library = new Library();

        /*Attach action listener for opening a file when the below Buttons are clicked*/
        openFileButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String fileName = fileTextField.getText();

                /*Load books from the file into the library*/
                library.loadBooksFromFile(fileName);
                //JOptionPane.showMessageDialog(openFileButton,fileTextField.getText()+"");

            }
        });
        removeBarcodeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //JOptionPane.showMessageDialog(null, "Test");
                int barcode = Integer.parseInt(removeBarcodeTextField.getText());
                //library.removeBookByBarcode(barcode);
                removeBookByBarcode(barcode);
                //JOptionPane.showMessageDialog(null, "test");
                //JOptionPane.showMessageDialog(removeBarcodeButton,removeBarcodeTextField.getText()+"");

            }
        });
        removeTitleButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String title = removeTileTextField.getText();
                //JOptionPane.showMessageDialog(removeTitleButton,removeTileTextField.getText()+"");
                //library.removeBookByTitle(title);
                removeBookByTitle(title);
            }
        });
        checkoutButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String title = checkoutTitleTextField.getText();
                //JOptionPane.showMessageDialog(checkoutButton,checkoutTitleTextField.getText()+"");
                //library.checkoutBook(title);
                checkoutBook(title);
                //JOptionPane.showMessageDialog(null, "test");
            }
        });
        checkinButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String title = checkinTitleTextField.getText();
                // JOptionPane.showMessageDialog(checkinButton,checkinTitleTextField.getText()+"");
                //library.checkinBook(title);
                checkinBook(title);
                //JOptionPane.showMessageDialog(null, "test");
            }
        });
        printDatabaseButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //library.listBooks();//Call the listBooks()method to print the database

                /*Call the listBooks()method to print the database*/
                listBooks();
            }
        });


        exitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                /*Terminate the application*/
                System.exit(8);


            }
        });

        /* creating the frame and setting its properties*/
        JFrame frame = new JFrame("Library Management System");

        /*Set the frame title*/
        JPanel contentPane = new JPanel();

        /*set layout manager*/
        JPanel buttonPanel = new JPanel();
        JPanel displayPanel = new JPanel();
        contentPane.setLayout(new BorderLayout());
        displayPanel.setLayout(new BorderLayout());
        contentPane.add(buttonPanel, BorderLayout.NORTH);
        contentPane.add(displayPanel, BorderLayout.SOUTH);

        /*Create a new JTextArea with the specified rows and columns*/
        display = new JTextArea(100, 100);

        buttonPanel.setLayout(new GridLayout(7, 3));

        /*Set the root component of the frame*/
        frame.setContentPane(contentPane);

        //displayPanel.add(display,BorderLayout.NORTH);
        contentPane.add(display, BorderLayout.CENTER);

        /*adding components to the frame*/
        buttonPanel.setLayout(new GridLayout(7, 3));
        buttonPanel.add(new JLabel("File Name"));
        buttonPanel.add(fileTextField);
        buttonPanel.add(openFileButton);

        buttonPanel.add(new JLabel("Remove Book By Barcode"));
        buttonPanel.add(removeBarcodeTextField);
        buttonPanel.add(removeBarcodeButton);

        buttonPanel.add(new JLabel("Remove Book By Tile"));
        buttonPanel.add(removeTileTextField);
        buttonPanel.add(removeTitleButton);

        buttonPanel.add(new JLabel("Check- Out By Book Title"));
        buttonPanel.add(checkoutTitleTextField);
        buttonPanel.add(checkoutButton);

        buttonPanel.add(new JLabel("Check- In By Book Title"));
        buttonPanel.add(checkinTitleTextField);
        buttonPanel.add(checkinButton);

        buttonPanel.add(new JLabel(""));
        buttonPanel.add(new JLabel(""));
        buttonPanel.add(printDatabaseButton);

        buttonPanel.add(new JLabel(""));
        buttonPanel.add(exitButton);
        buttonPanel.add(new JLabel(""));

        /*Set the default close operation*/
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        /*Pack the components*/
        frame.pack();

        /*Make the frame visible*/
        frame.setVisible(true);
        display.setVisible(true);
        displayPanel.setVisible(true);


        try {
            /*Establish a connection to the MySQL database using DriverManager and connection URL*/
            connection = DriverManager.getConnection(

                    /* URL of the database*/
                    "jdbc:mysql://127.0.0.1:3306/LMS",
                    "root", "Chance24!"

            );
            /*Create a statement for executing SQL queries*/
            Statement statement = connection.createStatement();

            /*Execute a query to select all records from the "LibraryCollection" table*/
            ResultSet resultSet = statement.executeQuery("SELECT *FROM LibraryCollection");

            /*Iterate through the result set and print the values of each column for each row*/
            while (resultSet.next()) {
                System.out.println(resultSet.getString("Barcode"));
                System.out.println(resultSet.getString("Title"));
                System.out.println(resultSet.getString("Author"));
                System.out.println(resultSet.getString("Genre"));
                System.out.println(resultSet.getString("Book_Status"));
                System.out.println(resultSet.getString("DueDate"));
                int b = (resultSet.getInt("Barcode"));
                //display.setText(resultSet.getInt("Barcode"));
                //display.setText("hello world");

                //display.append(String.valueOf(resultSet.getInt("Barcode")));
                //display.append(resultSet.getString("Title"));
                //display.append(resultSet.getString("Author"));
                //display.append(resultSet.getString("Genre"));
                //display.append(resultSet.getString("Book_Status"));
                // display.append(resultSet.getString("DueDate"));



                display.append(String.valueOf(resultSet.getInt("Barcode")));
                display.append("\t");
                display.append(resultSet.getString("Title"));
                display.append("\t\t\t");
                display.append(resultSet.getString("Author"));
                display.append("\t\t\t");
                display.append(resultSet.getString("Genre"));
                display.append("\t\t");
                display.append(resultSet.getString("Book_Status"));
                display.append("\t\t");
                display.append(resultSet.getString("DueDate"));
                display.append("\n");


            }
        } catch (SQLException e) {
            /*Print the stack trace if a SQLException is caught*/
            e.printStackTrace();
        }
    }


    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                /* Create an instance of LMSGUI*/
                new LMSGUI();
            }
        });
    }



    /**
     * Implement logic to open file and add books to the LMS database
     * Display error message if the file was not found
     */
    public void loadBooksFromFile(String fileName) {

    }


    /**
     * Implement logic to print the LMS database to the screen
     */
    public void listBooks() {
        try{

        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery("SELECT *FROM LibraryCollection");
        display.setText("");
        while (resultSet.next()) {
            System.out.println(resultSet.getString("Barcode"));
            System.out.println(resultSet.getString("Title"));
            System.out.println(resultSet.getString("Author"));
            System.out.println(resultSet.getString("Genre"));
            System.out.println(resultSet.getString("Book_Status"));
            System.out.println(resultSet.getString("DueDate"));
            int b = (resultSet.getInt("Barcode"));



            display.append(String.valueOf(resultSet.getInt("Barcode")));
            display.append("\t");
            display.append(resultSet.getString("Title"));
            display.append("\t");
            display.append(resultSet.getString("Author"));
            display.append("\t");
            display.append(resultSet.getString("Genre"));
            display.append("\t");
            display.append(resultSet.getString("Book_Status"));
            display.append("\t");
            display.append(resultSet.getString("DueDate"));
            display.append("\n");


        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

    /**
     *  Implement logic to remove a book from the LMS database by barcode
     *  Display a confirmation message if the book was deleted
     *  Display an error message if the barcode was not found
     */
    public void removeBookByBarcode(int barcode) {
        //JOptionPane.showMessageDialog(null, "Error");
        try {
            PreparedStatement statement = connection.prepareStatement("DELETE FROM LibraryCollection WHERE barcode = ?");
            statement.setInt(1, barcode);
            int rowsAffected = statement.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Book removed successfully.");
                JOptionPane.showMessageDialog(null, "Book successfully removed");
            } else {
                System.out.println("Book not found.");
                JOptionPane.showMessageDialog(null, "Book not found");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error");
            e.printStackTrace();
        }
        listBooks();
    }

    /**
     *  Implement logic to remove a book from the LMS database by title
     *  Display a confirmation message if the book was deleted
     *  Display an error message if the title was not found
     */
    public void removeBookByTitle(String title) {
        try {
            PreparedStatement statement = connection.prepareStatement("DELETE FROM LibraryCollection WHERE title = ?");
            statement.setString(1, title);
            int rowsAffected = statement.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Book removed successfully.");
                JOptionPane.showMessageDialog(null, "Book successfully removed");
            } else {
                System.out.println("Book not found.");
                JOptionPane.showMessageDialog(null, "Book not found");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error");
            e.printStackTrace();
        }
        listBooks();
    }


    /**
     * Implement logic to check out a book from the LMS database by title
     * Display a confirmation message
     * Display an error message if the book is already checked out
     */
    public void checkoutBook(String title) {
        try {
            PreparedStatement statement = connection.prepareStatement("UPDATE LibraryCollection SET " +
                    "Book_Status = 'checked out'" + ", DueDate = ? WHERE title = ?");
            /*Set a default due date for simplicity*/
            statement.setString(1, "2024-12-31");
            statement.setString(2, title);
            int rowsAffected = statement.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Book checked out successfully.");
                JOptionPane.showMessageDialog(null, "Book checked out successfully");
            } else {
                System.out.println("Book not found.");
                JOptionPane.showMessageDialog(null, "Book not found.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        listBooks();
    }

    /**
     * Implement logic to check in a book to the LMS database by title
     */
    public void checkinBook(String title) {
        try {
            PreparedStatement statement = connection.prepareStatement("UPDATE LibraryCollection SET" +
                    " Book_Status = 'checked in', DueDate = ? WHERE title= ?");

            /*Set a default due date for simplicity*/
            statement.setString(1, null);
            statement.setString(2, title);
            int rowsAffected = statement.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Book checked in successfully.");
                JOptionPane.showMessageDialog(null, "Book checked in successfully.");

            } else {
                System.out.println("Book not found.");
                JOptionPane.showMessageDialog(null, "Book not found.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        listBooks();
    }



}



